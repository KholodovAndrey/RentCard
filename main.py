import os
import json
import re
import logging
import asyncio
from datetime import datetime
from PIL import Image, ImageDraw
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, Frame
from reportlab.lib.units import cm
from reportlab.lib import colors
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç main.py
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

CONFIGS_DIR = os.path.join(BASE_DIR, 'configs')
PHOTOS_DIR = os.path.join(BASE_DIR, 'photos')
FONTS_DIR = BASE_DIR

font_path = os.path.join(FONTS_DIR, 'DejaVuSans.ttf')
bold_font_path = os.path.join(FONTS_DIR, 'DejaVuSans-Bold.ttf')

try:
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', bold_font_path))
    font_normal = 'DejaVuSans'
    font_bold = 'DejaVuSans-Bold'
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
    font_normal = 'Helvetica'
    font_bold = 'Helvetica-Bold'

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ—Ä–∞—Ö
with open(os.path.join(BASE_DIR, 'configs', 'boats.json'), 'r', encoding='utf-8') as f:
    BOATS = json.load(f)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    boat = State()
    hours = State()
    date = State()
    time = State()
    pier = State()
    guests_count = State()
    captain_name = State()
    captain_phone = State()
    client_name = State()
    remaining_payment = State()

RULES = [
    "‚Ä¢ –ù–∞–ø–∏—Ç–∫–∏ –∏ –∑–∞–∫—É—Å–∫–∏ ‚Äî –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –Ω–∞ –±–æ—Ä—Ç—É –µ—Å—Ç—å –∏–∑—è—â–Ω—ã–µ –±–æ–∫–∞–ª—ã.",
    "‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—è—Ç–Ω–∞: –∫—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ, –≤–∏—à–Ω—ë–≤—ã–π —Å–æ–∫, —è—Ä–∫–∏–µ —è–≥–æ–¥—ã.",
    "‚Ä¢ –ö—É—Ä–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º.",
    "‚Ä¢ –ü–∏—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –æ–≥–æ–Ω—å –∑–∞–ø—Ä–µ—â–µ–Ω—ã.",
    "‚Ä¢ –û–±—É–≤—å ‚Äî —Ç–æ–Ω–∫–∏–µ –∫–∞–±–ª—É–∫–∏ –∏ —à–ø–∏–ª—å–∫–∏ –º–æ–≥—É—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞–ª—É–±—ã.",
    "‚Ä¢ –ü—Ä–∏–±—ã—Ç–∏–µ ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±—ã—Ç—å —É –ø—Ä–∏—á–∞–ª–∞ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
]

MANAGER_INFO = [
    "–ù–æ–º–µ—Ä –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ 5-10 –º–∏–Ω—É—Ç –¥–æ —Ä–µ–π—Å–∞.",
    "–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ +7 921-927-21-13"
]

async def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def get_boat_select_button(boat_name: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {boat_name}", callback_data=f"boat_{boat_name}")
    return builder.as_markup()

def get_hours_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for i in range(1, 7):
        builder.add(KeyboardButton(text=str(i)))
    builder.adjust(3, 3)
    return builder.as_markup(resize_keyboard=True)

def round_corners(image_path, radius=20):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
    from PIL import Image, ImageDraw
    from io import BytesIO
    
    original = Image.open(image_path).convert("RGBA")
    width, height = original.size
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
    mask = Image.new('L', (width, height), 0)
    draw = ImageDraw.Draw(mask)
    draw.rounded_rectangle((0, 0, width, height), radius, fill=255)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    result = Image.new('RGBA', (width, height))
    result.paste(original, (0, 0), mask)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
    output = BytesIO()
    result.save(output, format='PNG')
    output.seek(0)
    return output

def add_image_to_pdf(canvas, image_path, x, y, width, height, radius=15):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ PDF canvas —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
    from reportlab.lib.utils import ImageReader
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        rounded_img = round_corners(image_path, radius)
        
        # –†–∏—Å—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = ImageReader(rounded_img)
        canvas.drawImage(img, x, y, width=width, height=height, mask='auto')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Ä–∏—Å—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = ImageReader(image_path)
        canvas.drawImage(img, x, y, width=width, height=height)

def fill_pdf_template(data: dict) -> str:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω PDF (form.pdf) –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    from PyPDF2 import PdfReader, PdfWriter
    from reportlab.pdfgen import canvas
    from reportlab.lib import colors
    from io import BytesIO
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
    template_path = os.path.join(CONFIGS_DIR, 'form.pdf')
    output_path = os.path.join(BASE_DIR, '–∞—Ä–µ–Ω–¥–∞.pdf')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ç–µ—Ä–∞
    boat_image_path = os.path.join(PHOTOS_DIR, BOATS[data['boat']])
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    packet = BytesIO()
    can = canvas.Canvas(packet, pagesize=A4)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    try:
        can.setFont('DejaVuSans', 10)
    except:
        can.setFont('Helvetica', 10)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (RGB)
    can.setFillColor(colors.Color(1, 1, 1))  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ—Ä–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    add_image_to_pdf(can, boat_image_path, x=19, y=460, width=558, height=372, radius=30)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π)
    fields = {
        '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è': f"{data['date']} –≤ {data['time']}",
        '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ—Ä–∞': data['boat'],
        '–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ': f"{data.get('remaining_payment', '0')} —Ä—É–±.",
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{data['hours']} —á.",
        '–§–ò–û –≥–æ—Å—Ç—è': data['client_name'],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π': data['guests_count'],
        '–ò–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞': data['captain_name'],
        '–¢–µ–ª–µ—Ñ–æ–Ω –∫–∞–ø–∏—Ç–∞–Ω–∞': data['captain_phone'],
        '–ü—Ä–∏—á–∞–ª': data['pier']
    }
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    coordinates = {
        '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è': (22, 370),
        '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ—Ä–∞': (22, 315),
        '–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ': (22, 260),
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': (429, 370),
        '–§–ò–û –≥–æ—Å—Ç—è': (429, 315),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π': (429, 260),
        '–ò–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞': (208, 315),
        '–¢–µ–ª–µ—Ñ–æ–Ω –∫–∞–ø–∏—Ç–∞–Ω–∞': (208, 260),
        '–ü—Ä–∏—á–∞–ª': (208, 370)
    }
    
    for field, value in fields.items():
        if field in coordinates:
            x, y = coordinates[field]
            can.drawString(x, y, value)
    
    can.save()
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    packet.seek(0)
    new_pdf = PdfReader(packet)
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PDF
    existing_pdf = PdfReader(open(template_path, "rb"))
    output = PdfWriter()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = existing_pdf.pages[0]
    page.merge_page(new_pdf.pages[0])
    output.add_page(page)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(output_path, "wb") as output_stream:
        output.write(output_stream)
    
    return output_path

@dp.message(Command("start"))
async def start(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    for boat_name, photo_name in BOATS.items():
        try:
            await message.answer_photo(
                FSInputFile(os.path.join(PHOTOS_DIR, photo_name)),
                caption=f"üö§ {boat_name}",
                reply_markup=get_boat_select_button(boat_name)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {boat_name}: {e}")
            await message.answer(
                f"üö§ {boat_name}",
                reply_markup=get_boat_select_button(boat_name)
            )

@dp.message(F.text == "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")
async def new_card(message: types.Message):
    await start(message)

@dp.callback_query(F.data.startswith("boat_"))
async def process_boat(callback: types.CallbackQuery, state: FSMContext):
    boat_name = callback.data.removeprefix("boat_")
    await state.update_data(boat=boat_name)
    await state.set_state(Form.hours)
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {boat_name}\n\n–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã?",
        reply_markup=get_hours_keyboard()
    )
    await callback.answer()

@dp.message(Form.hours)
async def process_hours(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) not in range(1, 7):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:")
        return
    
    await state.update_data(hours=message.text)
    await state.set_state(Form.date)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07.2023):", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Form.date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(date=message.text)
        await state.set_state(Form.time)
        await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00):")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@dp.message(Form.time)
async def process_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        await state.update_data(time=message.text)
        await state.set_state(Form.pier)
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∞–ª –ø–æ—Å–∞–¥–∫–∏/–≤—ã—Å–∞–¥–∫–∏:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")

@dp.message(Form.pier)
async def process_pier(message: types.Message, state: FSMContext):
    await state.update_data(pier=message.text)
    await state.set_state(Form.guests_count)
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")

@dp.message(Form.guests_count)
async def process_guests_count(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.update_data(guests_count=message.text)
    await state.set_state(Form.captain_name)
    await message.answer("üë®‚Äç‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞:")

@dp.message(Form.captain_name)
async def process_captain_name(message: types.Message, state: FSMContext):
    await state.update_data(captain_name=message.text)
    await state.set_state(Form.captain_phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞:")

@dp.message(Form.captain_phone)
async def process_captain_phone(message: types.Message, state: FSMContext):
    if not re.match(r'^(\+7|8)[\d\- ]{10,}$', message.text):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79211234567 –∏–ª–∏ 89211234567):")
        return
    
    await state.update_data(captain_phone=message.text)
    await state.set_state(Form.client_name)
    await message.answer("üôã‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ—Å—Ç—è:")

@dp.message(Form.client_name)
async def process_client_name(message: types.Message, state: FSMContext):
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è\s-]+$', message.text):
        await message.answer("‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(client_name=message.text)
    await state.set_state(Form.remaining_payment)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ—Å—Ç–∞—Ç–∫–µ
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message(Form.remaining_payment)
async def process_remaining_payment(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not re.match(r'^\d+$', message.text):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):")
        return
    
    await state.update_data(remaining_payment=message.text)
    data = await state.get_data()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
    data['prepayment'] = "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∞"
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω PDF
    pdf_path = fill_pdf_template(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π PDF
    with open(pdf_path, 'rb') as pdf_file:
        await message.answer_document(
            types.BufferedInputFile(pdf_file.read(), filename="–∞—Ä–µ–Ω–¥–∞.pdf"),
            caption="‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∞—Ä–µ–Ω–¥—ã –≥–æ—Ç–æ–≤–∞!"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(pdf_path)
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞" –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await message.answer(
        "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")]],
            resize_keyboard=True
        )
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())